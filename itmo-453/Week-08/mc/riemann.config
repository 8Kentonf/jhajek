(logging/init {:file "/var/log/riemann/riemann.log"})

(require 'riemann.client)
(require '[examplecom.etc.email :refer :all])
(require '[examplecom.etc.graphite :refer :all])

(let [host "0.0.0.0"]
    (repl-server {:host "127.0.0.1"})
    (tcp-server {:host host})
    (udp-server {:host host})
    (ws-server  {:host host}))

(periodically-expire 10 {:keep-keys [:host :service :tags, :state, :description, :metric]})

(let [index (index)]

  (streams
    (default :ttl 60
      ; Index all events immediately.
      ; index
      ; #(info %)
      (where (not (tagged "notification"))
        index)

      (tagged "collectd"
        (smap rewrite-service graph)
        (tagged "notification"
          (changed-state {:init "ok"}
            (adjust [:service clojure.string/replace #"^processes-(.*)\/ps_count$" "$1"]
              (email "hajek@hawk.iit.edu"))))

         (where (and (expired? event)
                     (service #"^processes-.+\/ps_count\/processes"))
           (adjust [:service clojure.string/replace #"^processes-(.*)\/ps_count\/processes$" "$1"]
             (email "hajek@hawk.iit.edu")))) 
 
      (where (service #"^riemann.*") 
         graph) 
      ; (expired
       ; (throttle 1 120
        ;  (where (service #"^riemann.*"
         ;   (email "hajek@hawk.iit.edu")
             ; ))))
          )))
